{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Infrastructure Setup using CloudFormation - Application Stack",
    "Conditions": {
        "ConditionForRDSPublicAccessibility": {
            "Fn::Equals": [
                {
                    "Ref": "RDSPublicAccessibility"
                },
                "yes"
            ]
        }
    },
    "Parameters": {
        "AppName": {
            "Type": "String"
        },
        "Ec2InstanceType": {
            "Type": "String",
            "Default": "t2.micro",
            "AllowedValues": [
                "t2.micro"
            ],
            "Description": "Enter t2.micro or m1.small. Default is t2.micro."
        },
        "SSHKeyName": {
            "Type": "String"
        },
        "AMI": {
            "Type": "String"
        },
        "DBInstanceIdentifier": {
            "Type": "String"
        },
        "DBEngine": {
            "Type": "String"
        },
        "DBEngineVersion": {
            "Type": "String"
        },
        "DBInstanceClass": {
            "Type": "String"
        },
        "DBAllocatedStorage": {
            "Type": "Number",
            "Description": "The size of the database (GiB)"
        },
        "DBName": {
            "Type": "String"
        },
        "DBUser": {
            "Type": "String"
        },
        "DBPassword": {
            "Type": "String",
            "NoEcho": true
        },
        "RDSPublicAccessibility": {
            "Type": "String",
            "AllowedValues": [
                "yes",
                "no"
            ]
        },
        "EC2InstanceSize": {
            "Type": "Number"
        },
        "AWSRegion": {
            "Type": "String"
        },
        "AWSAccountID": {
            "Type": "String"
        },
        "CodeDeployApplicationName": {
            "Type": "String"
        },
        "S3ArtifactsBucket": {
            "Type": "String"
        },
        "CICDUser": {
            "Type": "String"
        },
        "Route53HostedZoneId": {
            "Type": "String"
        },
        "Route53RecordName": {
            "Type": "String"
        },
        "SourceEmailAddress": {
            "Type": "String"
        },
        "NetworkName": {
            "Type": "String"
        },
        "S3LambdaArtifactsBucket": {
            "Type": "String"
        }
    },
    "Resources": {
        "CodeDeployEC2S3Policy": {
            "Type": "AWS::IAM::ManagedPolicy",
            "Properties": {
                "ManagedPolicyName": {
                    "Fn::Join": [
                        "",
                        [
                            "CodeDeploy-EC2-S3-",
                            {
                                "Ref": "AppName"
                            }
                        ]
                    ]
                },
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "s3:GetObject"
                            ],
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:aws:s3:::",
                                        {
                                            "Ref": "S3ArtifactsBucket"
                                        },
                                        "/*"
                                    ]
                                ]
                            }
                        }
                    ]
                }
            }
        },
        "CircleCIUploadToS3Policy": {
            "Type": "AWS::IAM::ManagedPolicy",
            "Properties": {
                "ManagedPolicyName": {
                    "Fn::Join": [
                        "",
                        [
                            "CircleCI-Upload-To-S3-",
                            {
                                "Ref": "AppName"
                            }
                        ]
                    ]
                },
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "s3:PutObject"
                            ],
                            "Resource": [
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:s3:::",
                                            {
                                                "Ref": "S3ArtifactsBucket"
                                            },
                                            "/*"
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:s3:::",
                                            {
                                                "Ref": "S3LambdaArtifactsBucket"
                                            },
                                            "/*"
                                        ]
                                    ]
                                }
                            ]
                        }
                    ]
                },
                "Users": [
                    {
                        "Ref": "CICDUser"
                    }
                ]
            }
        },
        "CircleCIUpdateLambdaPolicy": {
            "Type": "AWS::IAM::ManagedPolicy",
            "Properties": {
                "ManagedPolicyName": {
                    "Fn::Join": [
                        "",
                        [
                            "CircleCI-Update-Lambda-",
                            {
                                "Ref": "AppName"
                            }
                        ]
                    ]
                },
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "lambda:UpdateFunctionCode",
                                "lambda:AddPermission",
                                "lambda:PutFunctionConcurrency"
                            ],
                            "Resource": {
                                "Fn::GetAtt": [
                                    "EmailToPeopleLambdaFunction",
                                    "Arn"
                                ]
                            }
                        }
                    ]
                },
                "Users": [
                    {
                        "Ref": "CICDUser"
                    }
                ]
            }
        },
        "CirlceCICodeDeployPolicy": {
            "Type": "AWS::IAM::ManagedPolicy",
            "Properties": {
                "ManagedPolicyName": {
                    "Fn::Join": [
                        "",
                        [
                            "CircleCI-Code-Deploy-",
                            {
                                "Ref": "AppName"
                            }
                        ]
                    ]
                },
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "codedeploy:RegisterApplicationRevision",
                                "codedeploy:GetApplicationRevision"
                            ],
                            "Resource": [
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:codedeploy:",
                                            {
                                                "Ref": "AWSRegion"
                                            },
                                            ":",
                                            {
                                                "Ref": "AWSAccountID"
                                            },
                                            ":application:",
                                            {
                                                "Ref": "CodeDeployApplicationName"
                                            }
                                        ]
                                    ]
                                }
                            ]
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "codedeploy:CreateDeployment",
                                "codedeploy:GetDeployment"
                            ],
                            "Resource": {
                                "Fn::Sub": "arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentgroup:${CodeDeployApplication}/${CodeDeploymentGroup}"
                            }
                        },
                        {
                            "Effect": "Allow",
                            "Action": [
                                "codedeploy:GetDeploymentConfig"
                            ],
                            "Resource": [
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:codedeploy:",
                                            {
                                                "Ref": "AWSRegion"
                                            },
                                            ":",
                                            {
                                                "Ref": "AWSAccountID"
                                            },
                                            ":deploymentconfig:CodeDeployDefault.OneAtATime"
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:codedeploy:",
                                            {
                                                "Ref": "AWSRegion"
                                            },
                                            ":",
                                            {
                                                "Ref": "AWSAccountID"
                                            },
                                            ":deploymentconfig:CodeDeployDefault.HalfAtATime"
                                        ]
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "arn:aws:codedeploy:",
                                            {
                                                "Ref": "AWSRegion"
                                            },
                                            ":",
                                            {
                                                "Ref": "AWSAccountID"
                                            },
                                            ":deploymentconfig:CodeDeployDefault.AllAtOnce"
                                        ]
                                    ]
                                }
                            ]
                        }
                    ]
                },
                "Users": [
                    {
                        "Ref": "CICDUser"
                    }
                ]
            }
        },
        "CodeDeployEC2ServiceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "ManagedPolicyArns": [
                    {
                        "Ref": "CodeDeployEC2S3Policy"
                    },
                    {
                        "Ref": "WebAppS3EC2S3Policy"
                    },
                    "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy",
                    "arn:aws:iam::aws:policy/CloudWatchAgentAdminPolicy",
                    {
                        "Ref": "EC2ToSQSPolicy"
                    },
                    {
                        "Ref": "EC2ToSNSPublishPolicy"
                    }
                ],
                "RoleName": {
                    "Fn::Join": [
                        "",
                        [
                            "CodeDeployEC2ServiceRole-",
                            {
                                "Ref": "AppName"
                            }
                        ]
                    ]
                }
            }
        },
        "CodeDeployServiceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "codedeploy.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"
                ],
                "RoleName": {
                    "Fn::Join": [
                        "",
                        [
                            "CodeDeployServiceRole-",
                            {
                                "Ref": "AppName"
                            }
                        ]
                    ]
                }
            }
        },
        "WebAppSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupName": {
                    "Fn::Sub": "WebAppSecurityGroup-${AppName}"
                },
                "GroupDescription": "WebApp Security Group through Cloud Formation",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "WebAppSecurityGroup-${AppName}"
                        }
                    }
                ],
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": 22,
                        "ToPort": 22
                    },
                    {
                        "IpProtocol": "tcp",
                        "SourceSecurityGroupId": {
                            "Ref": "LoadBalancerSecurityGroup"
                        },
                        "FromPort": 8000,
                        "ToPort": 8000
                    }
                ],
                "VpcId": {
                    "Fn::ImportValue": {
                        "Fn::Sub": "${NetworkName}-VPCID"
                    }
                }
            }
        },
        "LoadBalancerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupName": {
                    "Fn::Sub": "LoadBalancerSecurityGroup-${AppName}"
                },
                "GroupDescription": "Load Balancer Security Group",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "LoadBalancerSecurityGroup-${AppName}"
                        }
                    }
                ],
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": 22,
                        "ToPort": 22
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": "0.0.0.0/0"
                    }
                ],
                "VpcId": {
                    "Fn::ImportValue": {
                        "Fn::Sub": "${NetworkName}-VPCID"
                    }
                }
            }
        },
        "RDSSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupName": {
                    "Fn::Sub": "RDSSecurityGroup-${AppName}"
                },
                "GroupDescription": "RDS Security Group through Cloud Formation",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "RDSSecurityGroup-${AppName}"
                        }
                    }
                ],
                "SecurityGroupIngress": {
                    "IpProtocol": "tcp",
                    "FromPort": "5432",
                    "ToPort": "5432",
                    "SourceSecurityGroupId": {
                        "Ref": "WebAppSecurityGroup"
                    }
                },
                "VpcId": {
                    "Fn::ImportValue": {
                        "Fn::Sub": "${NetworkName}-VPCID"
                    }
                }
            }
        },
        "S3Bucket": {
            "Type": "AWS::S3::Bucket",
            "DeletionPolicy": "Delete",
            "Properties": {
                "PublicAccessBlockConfiguration": {
                    "BlockPublicAcls": "true",
                    "BlockPublicPolicy": "true",
                    "IgnorePublicAcls": "true",
                    "RestrictPublicBuckets": "true"
                },
                "LifecycleConfiguration": {
                    "Rules": [
                        {
                            "Id": "S3 Transition and Expiration",
                            "Prefix": "",
                            "Status": "Enabled",
                            "ExpirationInDays": "90",
                            "Transitions": [
                                {
                                    "TransitionInDays": 30,
                                    "StorageClass": "STANDARD_IA"
                                }
                            ]
                        }
                    ]
                },
                "BucketEncryption": {
                    "ServerSideEncryptionConfiguration": [
                        {
                            "ServerSideEncryptionByDefault": {
                                "SSEAlgorithm": "AES256"
                            }
                        }
                    ]
                }
            }
        },
        "WebAppS3EC2S3Policy": {
            "Type": "AWS::IAM::ManagedPolicy",
            "DependsOn": "S3Bucket",
            "Properties": {
                "ManagedPolicyName": {
                    "Fn::Join": [
                        "",
                        [
                            "WebApp-EC2-S3-Policy-",
                            {
                                "Ref": "AppName"
                            }
                        ]
                    ]
                },
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Action": [
                                "s3:ListBucket",
                                "s3:PutObject",
                                "s3:GetObject",
                                "s3:DeleteObject"
                            ],
                            "Resource": {
                                "Fn::Join": [
                                    "",
                                    [
                                        "arn:aws:s3:::",
                                        {
                                            "Ref": "S3Bucket"
                                        },
                                        "/*"
                                    ]
                                ]
                            }
                        }
                    ]
                }
            }
        },
        "EC2ToSQSPolicy": {
            "Type": "AWS::IAM::ManagedPolicy",
            "DependsOn": "SQSQueue",
            "Properties": {
                "ManagedPolicyName": {
                    "Fn::Join": [
                        "",
                        [
                            "EC2-To-SQS-Policy-",
                            {
                                "Ref": "AppName"
                            }
                        ]
                    ]
                },
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Action": [
                                "sqs:ReceiveMessage",
                                "sqs:SendMessage",
                                "sqs:DeleteMessage",
                                "sqs:GetQueueAttributes",
                                "sqs:GetQueueUrl"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Fn::GetAtt": [
                                    "SQSQueue",
                                    "Arn"
                                ]
                            }
                        }
                    ]
                }
            }
        },
        "EC2ToSNSPublishPolicy": {
            "Type": "AWS::IAM::ManagedPolicy",
            "DependsOn": "SNSTopic",
            "Properties": {
                "ManagedPolicyName": {
                    "Fn::Join": [
                        "",
                        [
                            "EC2-To-SNS-Policy-",
                            {
                                "Ref": "AppName"
                            }
                        ]
                    ]
                },
                "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Action": [
                                "sns:Publish"
                            ],
                            "Effect": "Allow",
                            "Resource": {
                                "Ref": "SNSTopic"
                            }
                        }
                    ]
                }
            }
        },
        "EC2InstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "InstanceProfileName": {
                    "Fn::Join": [
                        "",
                        [
                            "EC2-CSYE6255-Instance-Profile-",
                            {
                                "Ref": "AppName"
                            }
                        ]
                    ]
                },
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "CodeDeployEC2ServiceRole"
                    }
                ]
            }
        },
        "CodeDeployApplication": {
            "Type": "AWS::CodeDeploy::Application",
            "Properties": {
                "ApplicationName": {
                    "Ref": "CodeDeployApplicationName"
                },
                "ComputePlatform": "Server"
            }
        },
        "CodeDeploymentGroup": {
            "Type": "AWS::CodeDeploy::DeploymentGroup",
            "Properties": {
                "ApplicationName": {
                    "Ref": "CodeDeployApplication"
                },
                "AutoRollbackConfiguration": {
                    "Enabled": true,
                    "Events": [
                        "DEPLOYMENT_FAILURE"
                    ]
                },
                "AutoScalingGroups": [
                    {
                        "Ref": "AutoScalingGroup"
                    }
                ],
                "DeploymentConfigName": "CodeDeployDefault.AllAtOnce",
                "DeploymentGroupName": {
                    "Fn::Join": [
                        "",
                        [
                            {
                                "Ref": "CodeDeployApplicationName"
                            },
                            "-Group"
                        ]
                    ]
                },
                "DeploymentStyle": {
                    "DeploymentOption": "WITHOUT_TRAFFIC_CONTROL",
                    "DeploymentType": "IN_PLACE"
                },
                "Ec2TagFilters": [
                    {
                        "Key": "EC2InstancesName",
                        "Type": "KEY_AND_VALUE",
                        "Value": {
                            "Fn::Sub": "EC2_AutoScale_${AppName}"
                        }
                    }
                ],
                "LoadBalancerInfo": {
                    "TargetGroupInfoList": [
                        {
                            "Name": {
                                "Fn::GetAtt": [
                                    "LoadBalancerV2TargetGroup",
                                    "TargetGroupName"
                                ]
                            }
                        }
                    ]
                },
                "ServiceRoleArn": {
                    "Fn::GetAtt": [
                        "CodeDeployServiceRole",
                        "Arn"
                    ]
                }
            }
        },
        "AutoScalingConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "DependsOn": [
                "EC2InstanceProfile",
                "RDSInstance"
            ],
            "Properties": {
                "LaunchConfigurationName": {
                    "Fn::Sub": "asg_launch_config_${AppName}"
                },
                "ImageId": {
                    "Ref": "AMI"
                },
                "AssociatePublicIpAddress": "True",
                "SecurityGroups": [
                    {
                        "Ref": "WebAppSecurityGroup"
                    }
                ],
                "InstanceType": {
                    "Ref": "Ec2InstanceType"
                },
                "KeyName": {
                    "Ref": "SSHKeyName"
                },
                "IamInstanceProfile": {
                    "Ref": "EC2InstanceProfile"
                },
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "VolumeSize": {
                                "Ref": "EC2InstanceSize"
                            },
                            "VolumeType": "gp2",
                            "DeleteOnTermination": true
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash \n",
                                "sudo apt update \n",
                                "sudo apt install unzip \n",
                                "sudo service codedeploy-agent status \n",
                                "sudo echo export DB_HOST=",
                                {
                                    "Fn::GetAtt": [
                                        "RDSInstance",
                                        "Endpoint.Address"
                                    ]
                                },
                                " >> /etc/environment \n",
                                "sudo echo export DB_PORT=",
                                {
                                    "Fn::GetAtt": [
                                        "RDSInstance",
                                        "Endpoint.Port"
                                    ]
                                },
                                " >> /etc/environment \n",
                                "sudo echo export AWS_DEFAULT_REGION=",
                                {
                                    "Ref": "AWSRegion"
                                },
                                " >> /etc/environment \n",
                                "sudo echo export SQS_QUEUE_URL=",
                                {
                                    "Ref": "SQSQueue"
                                },
                                " >> /etc/environment \n",
                                "sudo echo export TOPIC_ARN=",
                                {
                                    "Ref": "SNSTopic"
                                },
                                " >> /etc/environment \n",
                                "sudo echo export DB_USERNAME=",
                                {
                                    "Ref": "DBUser"
                                },
                                " >> /etc/environment \n",
                                "sudo echo export DB_NAME=",
                                {
                                    "Ref": "DBName"
                                },
                                " >> /etc/environment \n",
                                "sudo echo export DB_PASSWORD=",
                                {
                                    "Ref": "DBPassword"
                                },
                                " >> /etc/environment \n",
                                "sudo echo export S3_BUCKET=",
                                {
                                    "Ref": "S3Bucket"
                                },
                                " >> /etc/environment \n",
                                "sudo echo export SOURCE_EMAIL_ADDRESS=",
                                {
                                    "Ref": "SourceEmailAddress"
                                },
                                " >> /etc/environment \n",
                                "sudo echo export LAMBDA_FUNCTION_NAME=",
                                {
                                    "Ref": "EmailToPeopleLambdaFunction"
                                },
                                " >> /etc/environment \n"
                            ]
                        ]
                    }
                }
            }
        },
        "AutoScalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "AutoScalingGroupName": {
                    "Fn::Sub": "EC2_AutoScale_${AppName}"
                },
                "LaunchConfigurationName": {
                    "Ref": "AutoScalingConfig"
                },
                "MinSize": 2,
                "MaxSize": 5,
                "DesiredCapacity": 2,
                "Cooldown": 60,
                "VPCZoneIdentifier": [
                    {
                        "Fn::ImportValue": {
                            "Fn::Sub": "${NetworkName}-PublicSubnet1"
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "EC2InstancesName",
                        "PropagateAtLaunch": "true",
                        "Value": {
                            "Fn::Sub": "EC2_AutoScale_${AppName}"
                        }
                    }
                ],
                "TargetGroupARNs": [
                    {
                        "Ref": "LoadBalancerV2TargetGroup"
                    }
                ]
            }
        },
        "WebServerScaleUpPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "AutoScalingGroup"
                },
                "Cooldown": "60",
                "ScalingAdjustment": "1"
            }
        },
        "WebServerScaleDownPolicy": {
            "Type": "AWS::AutoScaling::ScalingPolicy",
            "Properties": {
                "AdjustmentType": "ChangeInCapacity",
                "AutoScalingGroupName": {
                    "Ref": "AutoScalingGroup"
                },
                "Cooldown": "60",
                "ScalingAdjustment": "-1"
            }
        },
        "CPUAlarmHigh": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Scale-up if CPU > 5% for 4 minutes",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Statistic": "Average",
                "Period": "240",
                "EvaluationPeriods": "1",
                "Threshold": 5,
                "AlarmActions": [
                    {
                        "Ref": "WebServerScaleUpPolicy"
                    }
                ],
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                            "Ref": "AutoScalingGroup"
                        }
                    }
                ],
                "ComparisonOperator": "GreaterThanThreshold"
            }
        },
        "CPUAlarmLow": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Scale-down if CPU < 3% for 4 minutes",
                "MetricName": "CPUUtilization",
                "Namespace": "AWS/EC2",
                "Statistic": "Average",
                "Period": "60",
                "EvaluationPeriods": "1",
                "Threshold": 3,
                "AlarmActions": [
                    {
                        "Ref": "WebServerScaleDownPolicy"
                    }
                ],
                "Dimensions": [
                    {
                        "Name": "AutoScalingGroupName",
                        "Value": {
                            "Ref": "AutoScalingGroup"
                        }
                    }
                ],
                "ComparisonOperator": "LessThanThreshold"
            }
        },
        "LoadBalancerV2": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties": {
                "Name": {
                    "Fn::Sub": "LBV2-${AppName}"
                },
                "SecurityGroups": [
                    {
                        "Ref": "LoadBalancerSecurityGroup"
                    }
                ],
                "Subnets": [
                    {
                        "Fn::ImportValue": {
                            "Fn::Sub": "${NetworkName}-PublicSubnet1"
                        }
                    },
                    {
                        "Fn::ImportValue": {
                            "Fn::Sub": "${NetworkName}-PublicSubnet2"
                        }
                    },
                    {
                        "Fn::ImportValue": {
                            "Fn::Sub": "${NetworkName}-PublicSubnet3"
                        }
                    }
                ],
                "Type": "application"
            }
        },
        "LoadBalancerV2Listener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "DefaultActions": [
                    {
                        "Type": "forward",
                        "TargetGroupArn": {
                            "Ref": "LoadBalancerV2TargetGroup"
                        }
                    }
                ],
                "LoadBalancerArn": {
                    "Ref": "LoadBalancerV2"
                },
                "Port": 80,
                "Protocol": "HTTP"
            }
        },
        "LoadBalancerV2TargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "Name": {
                    "Fn::Sub": "LBV2TG-${AppName}"
                },
                "Port": 8000,
                "TargetType": "instance",
                "HealthCheckIntervalSeconds": 30,
                "HealthCheckPort": 8000,
                "UnhealthyThresholdCount": 5,
                "HealthyThresholdCount": 2,
                "HealthCheckPath": "/",
                "Matcher": {
                    "HttpCode": "200-499"
                },
                "Protocol": "HTTP",
                "VpcId": {
                    "Fn::ImportValue": {
                        "Fn::Sub": "${NetworkName}-VPCID"
                    }
                }
            }
        },
        "Route53RecordSet": {
            "Type": "AWS::Route53::RecordSet",
            "Properties": {
                "HostedZoneId": {
                    "Ref": "Route53HostedZoneId"
                },
                "Name": {
                    "Ref": "Route53RecordName"
                },
                "Type": "A",
                "AliasTarget": {
                    "HostedZoneId": {
                        "Fn::GetAtt": [
                            "LoadBalancerV2",
                            "CanonicalHostedZoneID"
                        ]
                    },
                    "DNSName": {
                        "Fn::GetAtt": [
                            "LoadBalancerV2",
                            "DNSName"
                        ]
                    }
                }
            }
        },
        "RDSInstance": {
            "Properties": {
                "DBInstanceIdentifier": {
                    "Ref": "DBInstanceIdentifier"
                },
                "DBName": {
                    "Ref": "DBName"
                },
                "AllocatedStorage": {
                    "Ref": "DBAllocatedStorage"
                },
                "DBInstanceClass": {
                    "Ref": "DBInstanceClass"
                },
                "Engine": {
                    "Ref": "DBEngine"
                },
                "EngineVersion": {
                    "Ref": "DBEngineVersion"
                },
                "MasterUsername": {
                    "Ref": "DBUser"
                },
                "MasterUserPassword": {
                    "Ref": "DBPassword"
                },
                "MultiAZ": false,
                "PubliclyAccessible": {
                    "Fn::If": [
                        "ConditionForRDSPublicAccessibility",
                        true,
                        false
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "RDS PostgreSQL - CSYE6225"
                    },
                    {
                        "Key": "Author",
                        "Value": "Ripan Halder"
                    }
                ],
                "VPCSecurityGroups": [
                    {
                        "Ref": "RDSSecurityGroup"
                    }
                ],
                "DBSubnetGroupName": {
                    "Ref": "DBSubnetGroup"
                }
            },
            "Type": "AWS::RDS::DBInstance"
        },
        "DBSubnetGroup": {
            "Type": "AWS::RDS::DBSubnetGroup",
            "Properties": {
                "DBSubnetGroupDescription": "Included two Subnet- PublicSubnet2, PublicSubnet3",
                "SubnetIds": [
                    {
                        "Fn::ImportValue": {
                            "Fn::Sub": "${NetworkName}-PublicSubnet2"
                        }
                    },
                    {
                        "Fn::ImportValue": {
                            "Fn::Sub": "${NetworkName}-PublicSubnet3"
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AppName}-DBSubnetGroup"
                        }
                    }
                ]
            }
        },
        "SQSQueue": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
                "MessageRetentionPeriod": 86400,
                "QueueName": {
                    "Fn::Sub": "SQSQueue-${AppName}"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "SQSQueue-${AppName}"
                        }
                    }
                ],
                "VisibilityTimeout": 20
            }
        },
        "SNSTopic": {
            "Type": "AWS::SNS::Topic",
            "Properties": {
                "Subscription": [
                    {
                        "Endpoint": {
                            "Fn::GetAtt": [
                                "EmailToPeopleLambdaFunction",
                                "Arn"
                            ]
                        },
                        "Protocol": "lambda"
                    }
                ],
                "TopicName": {
                    "Fn::Sub": "SNSTopic-${AppName}"
                }
            }
        },
        "EmailToPeopleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "",
                            [
                                "var response = require('cfn-response');",
                                "exports.handler = function(event, context, callback) {",
                                "   var responseData = {Value: event.ResourceProperties.List};",
                                "   responseData.Value.push(event.ResourceProperties.AppendedItem);",
                                "   response.send(event, context, response.SUCCESS, responseData);",
                                "};"
                            ]
                        ]
                    }
                },
                "Environment": {
                    "Variables": {
                        "SOURCE_EMAIL_ADDRESS": {
                            "Ref": "SourceEmailAddress"
                        },
                        "DYNAMO_DB_NAME": {
                            "Fn::Sub": "dynamo-db-${AppName}"
                        }
                    }
                },
                "FunctionName": {
                    "Fn::Sub": "lambda_email_function-${AppName}"
                },
                "Handler": "index.handler",
                "MemorySize": 256,
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaExecutionRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs10.x",
                "Timeout": 180
            }
        },
        "LambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "Action": "lambda:InvokeFunction",
                "FunctionName": {
                    "Ref": "EmailToPeopleLambdaFunction"
                },
                "Principal": "sns.amazonaws.com",
                "SourceArn": {
                    "Ref": "SNSTopic"
                }
            }
        },
        "LambdaExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "RoleName": {
                    "Fn::Sub": "LambdaExecutionRole-${AppName}"
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                    "arn:aws:iam::aws:policy/CloudWatchAgentAdminPolicy",
                    "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess",
                    "arn:aws:iam::aws:policy/AmazonSESFullAccess",
                    "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy",
                    "arn:aws:iam::aws:policy/AmazonSNSFullAccess",
                    "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
                ]
            }
        },
        "DynamoDBTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
                "AttributeDefinitions": [
                    {
                        "AttributeName": "id",
                        "AttributeType": "S"
                    }
                ],
                "KeySchema": [
                    {
                        "AttributeName": "id",
                        "KeyType": "HASH"
                    }
                ],
                "ProvisionedThroughput": {
                    "ReadCapacityUnits": "5",
                    "WriteCapacityUnits": "5"
                },
                "TableName": {
                    "Fn::Sub": "dynamo-db-${AppName}"
                },
                "TimeToLiveSpecification": {
                    "AttributeName": "ttl",
                    "Enabled": true
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName}-DynamoDBTable"
                        }
                    }
                ]
            }
        }
    }
}